// Generated by CoffeeScript 1.10.0
(function() {
  var ApplicationCharge, Article, Blog, Checkout, Collect, Comment, Country, CustomCollection, Customer, CustomerGroup, CustomerSavedSearch, Event, Fulfillment, Order, Page, Product, ProductImage, ProductSearchEngine, ProductVariant, Province, RecurringApplicationCharge, Redirect, Refund, ScriptTag, Session, Shop, SmartCollection, Theme, Transaction, Webhook, crypto, empty, isNumeric, sortObj, trim;

  crypto = require('crypto');

  Blog = require('./resources/blog');

  Product = require('./resources/product');

  Order = require('./resources/order');

  ApplicationCharge = require('./resources/application_charge');

  Article = require('./resources/article');

  Checkout = require('./resources/checkout');

  Collect = require('./resources/collect');

  Comment = require('./resources/comment');

  Country = require('./resources/country');

  CustomCollection = require('./resources/custom_collection');

  Customer = require('./resources/customer');

  CustomerGroup = require('./resources/customer_group');

  CustomerSavedSearch = require('./resources/customer_saved_search');

  Event = require('./resources/event');

  Fulfillment = require('./resources/fulfillment');

  Page = require('./resources/page');

  ProductImage = require('./resources/product_image');

  ProductSearchEngine = require('./resources/product_search_engine');

  ProductVariant = require('./resources/product_variant');

  Province = require('./resources/province');

  RecurringApplicationCharge = require('./resources/recurring_application_charge');

  Redirect = require('./resources/redirect');

  Refund = require('./resources/refund');

  ScriptTag = require('./resources/script_tag');

  Shop = require('./resources/shop');

  SmartCollection = require('./resources/smart_collection');

  Theme = require('./resources/theme');

  Transaction = require('./resources/transaction');

  Webhook = require('./resources/webhook');

  trim = function(string) {
    return string.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
  };

  empty = function(string) {
    string = trim(string);
    return string.length === 0;
  };

  sortObj = function(o) {
    var a, i, key, ref, sorted;
    sorted = {};
    a = [];
    for (key in o) {
      if (o.hasOwnProperty(key)) {
        a.push(key);
      }
    }
    a.sort();
    for (key = i = 0, ref = a.length; 0 <= ref ? i <= ref : i >= ref; key = 0 <= ref ? ++i : --i) {
      sorted[a[key]] = o[a[key]];
    }
    return sorted;
  };

  isNumeric = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };

  Session = (function() {
    Session.prototype.protocol = "https";

    function Session(url1, apiKey, secret, params1) {
      var expireTime, timestamp;
      this.url = url1;
      this.apiKey = apiKey;
      this.secret = secret;
      this.params = params1 != null ? params1 : {};
      if (this.params['signature'] != null) {
        timestamp = (new Date(this.params['timestamp'])).getTime();
        expireTime = (new Date).getTime() - (24 * 84600);
        if (!this.validateSignature(this.params) && expireTime > timestamp) {
          throw new Error('Invalid signature: Possible malicious login.');
        }
      }
      this.url = this.prepareUrl(this.url);
      if (this.valid) {
        this.blog = new Blog(this.site());
        this.product = new Product(this.site());
        this.order = new Order(this.site());
        this.applicationCharge = ApplicationCharge(this.site());
        this.article = Article(this.site());
        this.checkout = Checkout(this.site());
        this.collect = Collect(this.site());
        this.comment = Comment(this.site());
        this.country = Country(this.site());
        this.customCollection = CustomCollection(this.site());
        this.customer = Customer(this.site());
        this.customerGroup = CustomerGroup(this.site());
        this.customerSavedSearch = CustomerSavedSearch(this.site());
        this.event = Event(this.site());
        this.fulfillment = Fulfillment(this.site());
        this.page = Page(this.site());
        this.productImage = ProductImage(this.site());
        this.productSearchEngine = ProductSearchEngine(this.site());
        this.productVariant = ProductVariant(this.site());
        this.province = Province(this.site());
        this.recurringApplicationCharge = RecurringApplicationCharge(this.site());
        this.redirect = Redirect(this.site());
        this.refund = Refund(this.site());
        this.scriptTag = ScriptTag(this.site());
        this.shop = Shop(this.site());
        this.smartCollection = SmartCollection(this.site());
        this.theme = Theme(this.site());
        this.transaction = Transaction(this.site());
        this.webhook = Webhook(this.site());
      }
    }

    Session.prototype.createPermissionUrl = function() {
      if (!empty(this.url) && !empty(this.apiKey)) {
        return "http://" + this.url + "/admin/api/auth?api_key=" + this.apiKey;
      }
    };

    Session.prototype.site = function() {
      return this.protocol + "://" + this.apiKey + ":" + this.signature + "@" + this.url + "/admin";
    };

    Session.prototype.valid = function() {
      return !empty(this.url);
    };

    Session.prototype.prepareUrl = function(url) {
      if (empty(url)) {
        return '';
      }
      url.replace(/https?:\/\//, '');
      if (url.indexOf(".") === -1) {
        url += '.myshopify.com';
      }
      return url;
    };

    Session.prototype.validateSignature = function(params) {
      var generatedSignature, k, v;
      this.signature = params['signature'];
      generatedSignature = this.secret;
      params = sortObj(params);
      for (k in params) {
        v = params[k];
        if (k !== "signature" && k !== "action" && k !== "controller" && !isNumeric(k) && (k != null)) {
          generatedSignature += k + "=" + v;
        }
      }
      generatedSignature = generatedSignature.replace(new RegExp("undefined=undefined"), '');
      generatedSignature = crypto.createHash('md5').update("" + generatedSignature).digest("hex");
      return generatedSignature === this.signature;
    };

    return Session;

  })();

  module.exports = Session;

}).call(this);
